// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wtkeqrf0/you-together/ent/room"
	"github.com/wtkeqrf0/you-together/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (uc *UserCreate) SetCreateTime(t time.Time) *UserCreate {
	uc.mutation.SetCreateTime(t)
	return uc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreateTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreateTime(*t)
	}
	return uc
}

// SetUpdateTime sets the "update_time" field.
func (uc *UserCreate) SetUpdateTime(t time.Time) *UserCreate {
	uc.mutation.SetUpdateTime(t)
	return uc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdateTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdateTime(*t)
	}
	return uc
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (uc *UserCreate) SetIsEmailVerified(b bool) *UserCreate {
	uc.mutation.SetIsEmailVerified(b)
	return uc
}

// SetNillableIsEmailVerified sets the "is_email_verified" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsEmailVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsEmailVerified(*b)
	}
	return uc
}

// SetPasswordHash sets the "password_hash" field.
func (uc *UserCreate) SetPasswordHash(b []byte) *UserCreate {
	uc.mutation.SetPasswordHash(b)
	return uc
}

// SetBiography sets the "biography" field.
func (uc *UserCreate) SetBiography(s string) *UserCreate {
	uc.mutation.SetBiography(s)
	return uc
}

// SetNillableBiography sets the "biography" field if the given value is not nil.
func (uc *UserCreate) SetNillableBiography(s *string) *UserCreate {
	if s != nil {
		uc.SetBiography(*s)
	}
	return uc
}

// SetRole sets the "role" field.
func (uc *UserCreate) SetRole(s string) *UserCreate {
	uc.mutation.SetRole(s)
	return uc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uc *UserCreate) SetNillableRole(s *string) *UserCreate {
	if s != nil {
		uc.SetRole(*s)
	}
	return uc
}

// SetFriendsIds sets the "friends_ids" field.
func (uc *UserCreate) SetFriendsIds(s []string) *UserCreate {
	uc.mutation.SetFriendsIds(s)
	return uc
}

// SetLanguage sets the "language" field.
func (uc *UserCreate) SetLanguage(s string) *UserCreate {
	uc.mutation.SetLanguage(s)
	return uc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (uc *UserCreate) SetNillableLanguage(s *string) *UserCreate {
	if s != nil {
		uc.SetLanguage(*s)
	}
	return uc
}

// SetTheme sets the "theme" field.
func (uc *UserCreate) SetTheme(s string) *UserCreate {
	uc.mutation.SetTheme(s)
	return uc
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (uc *UserCreate) SetNillableTheme(s *string) *UserCreate {
	if s != nil {
		uc.SetTheme(*s)
	}
	return uc
}

// SetFirstName sets the "first_name" field.
func (uc *UserCreate) SetFirstName(s string) *UserCreate {
	uc.mutation.SetFirstName(s)
	return uc
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableFirstName(s *string) *UserCreate {
	if s != nil {
		uc.SetFirstName(*s)
	}
	return uc
}

// SetLastName sets the "last_name" field.
func (uc *UserCreate) SetLastName(s string) *UserCreate {
	uc.mutation.SetLastName(s)
	return uc
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastName(s *string) *UserCreate {
	if s != nil {
		uc.SetLastName(*s)
	}
	return uc
}

// SetSessions sets the "sessions" field.
func (uc *UserCreate) SetSessions(s []string) *UserCreate {
	uc.mutation.SetSessions(s)
	return uc
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (uc *UserCreate) SetRoomID(id int) *UserCreate {
	uc.mutation.SetRoomID(id)
	return uc
}

// SetNillableRoomID sets the "room" edge to the Room entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableRoomID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetRoomID(*id)
	}
	return uc
}

// SetRoom sets the "room" edge to the Room entity.
func (uc *UserCreate) SetRoom(r *Room) *UserCreate {
	return uc.SetRoomID(r.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if err := uc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*User, UserMutation](ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() error {
	if _, ok := uc.mutation.CreateTime(); !ok {
		if user.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := user.DefaultCreateTime()
		uc.mutation.SetCreateTime(v)
	}
	if _, ok := uc.mutation.UpdateTime(); !ok {
		if user.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := user.DefaultUpdateTime()
		uc.mutation.SetUpdateTime(v)
	}
	if _, ok := uc.mutation.IsEmailVerified(); !ok {
		v := user.DefaultIsEmailVerified
		uc.mutation.SetIsEmailVerified(v)
	}
	if _, ok := uc.mutation.Role(); !ok {
		v := user.DefaultRole
		uc.mutation.SetRole(v)
	}
	if _, ok := uc.mutation.Language(); !ok {
		v := user.DefaultLanguage
		uc.mutation.SetLanguage(v)
	}
	if _, ok := uc.mutation.Theme(); !ok {
		v := user.DefaultTheme
		uc.mutation.SetTheme(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "User.create_time"`)}
	}
	if _, ok := uc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "User.update_time"`)}
	}
	if v, ok := uc.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if _, ok := uc.mutation.IsEmailVerified(); !ok {
		return &ValidationError{Name: "is_email_verified", err: errors.New(`ent: missing required field "User.is_email_verified"`)}
	}
	if v, ok := uc.mutation.Biography(); ok {
		if err := user.BiographyValidator(v); err != nil {
			return &ValidationError{Name: "biography", err: fmt.Errorf(`ent: validator failed for field "User.biography": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "User.role"`)}
	}
	if _, ok := uc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "User.language"`)}
	}
	if _, ok := uc.mutation.Theme(); !ok {
		return &ValidationError{Name: "theme", err: errors.New(`ent: missing required field "User.theme"`)}
	}
	if v, ok := uc.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := uc.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uc.conflict
	if value, ok := uc.mutation.CreateTime(); ok {
		_spec.SetField(user.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := uc.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.IsEmailVerified(); ok {
		_spec.SetField(user.FieldIsEmailVerified, field.TypeBool, value)
		_node.IsEmailVerified = value
	}
	if value, ok := uc.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeBytes, value)
		_node.PasswordHash = &value
	}
	if value, ok := uc.mutation.Biography(); ok {
		_spec.SetField(user.FieldBiography, field.TypeString, value)
		_node.Biography = &value
	}
	if value, ok := uc.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	if value, ok := uc.mutation.FriendsIds(); ok {
		_spec.SetField(user.FieldFriendsIds, field.TypeJSON, value)
		_node.FriendsIds = value
	}
	if value, ok := uc.mutation.Language(); ok {
		_spec.SetField(user.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := uc.mutation.Theme(); ok {
		_spec.SetField(user.FieldTheme, field.TypeString, value)
		_node.Theme = value
	}
	if value, ok := uc.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
		_node.FirstName = &value
	}
	if value, ok := uc.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
		_node.LastName = &value
	}
	if value, ok := uc.mutation.Sessions(); ok {
		_spec.SetField(user.FieldSessions, field.TypeJSON, value)
		_node.Sessions = value
	}
	if nodes := uc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.RoomTable,
			Columns: []string{user.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *UserUpsert) SetUpdateTime(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdateTime() *UserUpsert {
	u.SetExcluded(user.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *UserUpsert) SetName(v string) *UserUpsert {
	u.Set(user.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsert) UpdateName() *UserUpsert {
	u.SetExcluded(user.FieldName)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (u *UserUpsert) SetIsEmailVerified(v bool) *UserUpsert {
	u.Set(user.FieldIsEmailVerified, v)
	return u
}

// UpdateIsEmailVerified sets the "is_email_verified" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsEmailVerified() *UserUpsert {
	u.SetExcluded(user.FieldIsEmailVerified)
	return u
}

// SetPasswordHash sets the "password_hash" field.
func (u *UserUpsert) SetPasswordHash(v []byte) *UserUpsert {
	u.Set(user.FieldPasswordHash, v)
	return u
}

// UpdatePasswordHash sets the "password_hash" field to the value that was provided on create.
func (u *UserUpsert) UpdatePasswordHash() *UserUpsert {
	u.SetExcluded(user.FieldPasswordHash)
	return u
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (u *UserUpsert) ClearPasswordHash() *UserUpsert {
	u.SetNull(user.FieldPasswordHash)
	return u
}

// SetBiography sets the "biography" field.
func (u *UserUpsert) SetBiography(v string) *UserUpsert {
	u.Set(user.FieldBiography, v)
	return u
}

// UpdateBiography sets the "biography" field to the value that was provided on create.
func (u *UserUpsert) UpdateBiography() *UserUpsert {
	u.SetExcluded(user.FieldBiography)
	return u
}

// ClearBiography clears the value of the "biography" field.
func (u *UserUpsert) ClearBiography() *UserUpsert {
	u.SetNull(user.FieldBiography)
	return u
}

// SetRole sets the "role" field.
func (u *UserUpsert) SetRole(v string) *UserUpsert {
	u.Set(user.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsert) UpdateRole() *UserUpsert {
	u.SetExcluded(user.FieldRole)
	return u
}

// SetFriendsIds sets the "friends_ids" field.
func (u *UserUpsert) SetFriendsIds(v []string) *UserUpsert {
	u.Set(user.FieldFriendsIds, v)
	return u
}

// UpdateFriendsIds sets the "friends_ids" field to the value that was provided on create.
func (u *UserUpsert) UpdateFriendsIds() *UserUpsert {
	u.SetExcluded(user.FieldFriendsIds)
	return u
}

// ClearFriendsIds clears the value of the "friends_ids" field.
func (u *UserUpsert) ClearFriendsIds() *UserUpsert {
	u.SetNull(user.FieldFriendsIds)
	return u
}

// SetLanguage sets the "language" field.
func (u *UserUpsert) SetLanguage(v string) *UserUpsert {
	u.Set(user.FieldLanguage, v)
	return u
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *UserUpsert) UpdateLanguage() *UserUpsert {
	u.SetExcluded(user.FieldLanguage)
	return u
}

// SetTheme sets the "theme" field.
func (u *UserUpsert) SetTheme(v string) *UserUpsert {
	u.Set(user.FieldTheme, v)
	return u
}

// UpdateTheme sets the "theme" field to the value that was provided on create.
func (u *UserUpsert) UpdateTheme() *UserUpsert {
	u.SetExcluded(user.FieldTheme)
	return u
}

// SetFirstName sets the "first_name" field.
func (u *UserUpsert) SetFirstName(v string) *UserUpsert {
	u.Set(user.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateFirstName() *UserUpsert {
	u.SetExcluded(user.FieldFirstName)
	return u
}

// ClearFirstName clears the value of the "first_name" field.
func (u *UserUpsert) ClearFirstName() *UserUpsert {
	u.SetNull(user.FieldFirstName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *UserUpsert) SetLastName(v string) *UserUpsert {
	u.Set(user.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastName() *UserUpsert {
	u.SetExcluded(user.FieldLastName)
	return u
}

// ClearLastName clears the value of the "last_name" field.
func (u *UserUpsert) ClearLastName() *UserUpsert {
	u.SetNull(user.FieldLastName)
	return u
}

// SetSessions sets the "sessions" field.
func (u *UserUpsert) SetSessions(v []string) *UserUpsert {
	u.Set(user.FieldSessions, v)
	return u
}

// UpdateSessions sets the "sessions" field to the value that was provided on create.
func (u *UserUpsert) UpdateSessions() *UserUpsert {
	u.SetExcluded(user.FieldSessions)
	return u
}

// ClearSessions clears the value of the "sessions" field.
func (u *UserUpsert) ClearSessions() *UserUpsert {
	u.SetNull(user.FieldSessions)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(user.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *UserUpsertOne) SetUpdateTime(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdateTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertOne) SetName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (u *UserUpsertOne) SetIsEmailVerified(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsEmailVerified(v)
	})
}

// UpdateIsEmailVerified sets the "is_email_verified" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsEmailVerified() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsEmailVerified()
	})
}

// SetPasswordHash sets the "password_hash" field.
func (u *UserUpsertOne) SetPasswordHash(v []byte) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPasswordHash(v)
	})
}

// UpdatePasswordHash sets the "password_hash" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePasswordHash() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePasswordHash()
	})
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (u *UserUpsertOne) ClearPasswordHash() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPasswordHash()
	})
}

// SetBiography sets the "biography" field.
func (u *UserUpsertOne) SetBiography(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBiography(v)
	})
}

// UpdateBiography sets the "biography" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBiography() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBiography()
	})
}

// ClearBiography clears the value of the "biography" field.
func (u *UserUpsertOne) ClearBiography() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearBiography()
	})
}

// SetRole sets the "role" field.
func (u *UserUpsertOne) SetRole(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRole() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRole()
	})
}

// SetFriendsIds sets the "friends_ids" field.
func (u *UserUpsertOne) SetFriendsIds(v []string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetFriendsIds(v)
	})
}

// UpdateFriendsIds sets the "friends_ids" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateFriendsIds() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFriendsIds()
	})
}

// ClearFriendsIds clears the value of the "friends_ids" field.
func (u *UserUpsertOne) ClearFriendsIds() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearFriendsIds()
	})
}

// SetLanguage sets the "language" field.
func (u *UserUpsertOne) SetLanguage(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLanguage() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLanguage()
	})
}

// SetTheme sets the "theme" field.
func (u *UserUpsertOne) SetTheme(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetTheme(v)
	})
}

// UpdateTheme sets the "theme" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateTheme() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTheme()
	})
}

// SetFirstName sets the "first_name" field.
func (u *UserUpsertOne) SetFirstName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateFirstName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *UserUpsertOne) ClearFirstName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *UserUpsertOne) SetLastName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *UserUpsertOne) ClearLastName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastName()
	})
}

// SetSessions sets the "sessions" field.
func (u *UserUpsertOne) SetSessions(v []string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSessions(v)
	})
}

// UpdateSessions sets the "sessions" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSessions() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSessions()
	})
}

// ClearSessions clears the value of the "sessions" field.
func (u *UserUpsertOne) ClearSessions() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearSessions()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(user.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *UserUpsertBulk) SetUpdateTime(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdateTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertBulk) SetName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (u *UserUpsertBulk) SetIsEmailVerified(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsEmailVerified(v)
	})
}

// UpdateIsEmailVerified sets the "is_email_verified" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsEmailVerified() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsEmailVerified()
	})
}

// SetPasswordHash sets the "password_hash" field.
func (u *UserUpsertBulk) SetPasswordHash(v []byte) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPasswordHash(v)
	})
}

// UpdatePasswordHash sets the "password_hash" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePasswordHash() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePasswordHash()
	})
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (u *UserUpsertBulk) ClearPasswordHash() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPasswordHash()
	})
}

// SetBiography sets the "biography" field.
func (u *UserUpsertBulk) SetBiography(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBiography(v)
	})
}

// UpdateBiography sets the "biography" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBiography() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBiography()
	})
}

// ClearBiography clears the value of the "biography" field.
func (u *UserUpsertBulk) ClearBiography() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearBiography()
	})
}

// SetRole sets the "role" field.
func (u *UserUpsertBulk) SetRole(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRole() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRole()
	})
}

// SetFriendsIds sets the "friends_ids" field.
func (u *UserUpsertBulk) SetFriendsIds(v []string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetFriendsIds(v)
	})
}

// UpdateFriendsIds sets the "friends_ids" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateFriendsIds() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFriendsIds()
	})
}

// ClearFriendsIds clears the value of the "friends_ids" field.
func (u *UserUpsertBulk) ClearFriendsIds() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearFriendsIds()
	})
}

// SetLanguage sets the "language" field.
func (u *UserUpsertBulk) SetLanguage(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLanguage() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLanguage()
	})
}

// SetTheme sets the "theme" field.
func (u *UserUpsertBulk) SetTheme(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetTheme(v)
	})
}

// UpdateTheme sets the "theme" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateTheme() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTheme()
	})
}

// SetFirstName sets the "first_name" field.
func (u *UserUpsertBulk) SetFirstName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateFirstName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *UserUpsertBulk) ClearFirstName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *UserUpsertBulk) SetLastName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *UserUpsertBulk) ClearLastName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastName()
	})
}

// SetSessions sets the "sessions" field.
func (u *UserUpsertBulk) SetSessions(v []string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSessions(v)
	})
}

// UpdateSessions sets the "sessions" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSessions() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSessions()
	})
}

// ClearSessions clears the value of the "sessions" field.
func (u *UserUpsertBulk) ClearSessions() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearSessions()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
