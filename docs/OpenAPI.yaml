xopenapi: 3.0.3
info:
  title: YouTogether API
  description: |-
    This is CRUD API documentation for you-together-online project.
    You can get more info about that project [here](https://github.com/youtogether-online)
  contact:
    email: matvey-sizov@mail.ru
  version: 1.0.0

externalDocs:
  description: Source code
  url: https://github.com/youtogether-online/backend

servers:
  - url: http://localhost:3000/api
    description: Backend local instance
  - url: https://youtogether.localhost/api
    description: Docker instance
  - url: https://youtogether.frkam.dev/
    description: Official website instance

tags:
  - name: Auth
    description: Authenticate queries for user
  - name: Email
    description: Send messages from application smtp email
  - name: User
    description: User queries
  - name: Room
    description: Room queries

paths:
  /auth/session:
    get:
      tags: [ Auth ]
      summary: Returns authorized user session data
      description: Returns user session data from cookie session
      security:
        - cookieAuth: []
      responses:
        '200':
          $ref: '#/components/responses/SessionGetSuccess'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/SessionGetError'

    delete:
      tags: [ Auth ]
      security:
        - cookieAuth: []
      summary: Deletes user session
      description: Deletes user session and clear user session cookie
      responses:
        '200':
          description: Session deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/SessionDeleteError'


  /auth/email:
    post:
      tags: [ Auth ]
      summary: Authorization via email
      description: Authorize user with code that previously was sent to email. If user with specified email does not exist, create new user. Can be used for sign-in and sign-up.
      requestBody:
        $ref: "#/components/requestBodies/AuthEmailPost"
      parameters:
        - in: header
          name: Accept-Language
          schema:
            type: string
            enum:
              - EN
              - RU
            example: RU
      responses:
        '201':
          $ref: "#/components/responses/AuthSuccess"
        '400':
          $ref: "#/components/responses/AuthByEmailFailed"
        '500':
          $ref: '#/components/responses/AuthByEmailError'

  /auth/password:
    post:
      tags: [ Auth ]
      summary: Authorization via email with password
      description: Authorize user with email and password. If user with specified email does not exist, create new user. Can be used for sign-in and sign-up.
      requestBody:
        $ref: "#/components/requestBodies/AuthPasswordPost"
      parameters:
        - in: header
          name: Accept-Language
          schema:
            type: string
            enum:
              - EN
              - RU
            example: RU
      responses:
        '201':
          $ref: '#/components/responses/AuthSuccess'
        '400':
          $ref: '#/components/responses/AuthByPasswordFailed'
        '500':
          $ref: '#/components/responses/AuthByPasswordError'

  /email/send-code:
    post:
      tags: [ Email ]
      summary: Send secret authorization code to specified email
      description: Generates 5-digit string, saves it and sends it to specified email
      requestBody:
        $ref: "#/components/requestBodies/EmailSendCodePost"
      responses:
        '200':
          description: Mail was successfully sent
        '400':
          $ref: '#/components/responses/SendCodeFailed'
        '500':
          $ref: '#/components/responses/SendCodeError'
  
  /user/{name}:
    get:
      tags: [ User ]
      summary: Get user main info by username
      description: Returns user's main data by username, if exist
      parameters:
        - $ref: "#/components/parameters/Name"
      responses:
        '200':
          $ref: '#/components/responses/UserGetByUsernameSuccess'
        '400':
          $ref: '#/components/responses/UserGetByUsernameFailed'
        '500':
          $ref: '#/components/responses/UserGetByUsernameError'

  /user/check-name/{name}:
    get:
      tags: [ User ]
      summary: Check name on name already used
      description: Checks specified name on already exist
      parameters:
        - $ref: "#/components/parameters/Name"
      responses:
        '200':
          description: This name isn't in use
        '400':
          $ref: '#/components/responses/CheckNameFailed'
        '500':
          $ref: '#/components/responses/CheckNameError'

  /user:
    patch:
      tags: [ User ]
      summary: Update user's main data
      description: Updates some user's main data
      security:
        - cookieAuth: [ ]
      requestBody:
        $ref: "#/components/requestBodies/UserPatch"
      responses:
        '200':
          description: Updated
        '400':
          $ref: '#/components/responses/UserPatchFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/UserPatchError'

  /user/password:
    patch:
      tags: [ User ]
      summary: Update user's password
      description: Updates user's password by email
      security:
        - cookieAuth: [ ]
      requestBody:
        $ref: "#/components/requestBodies/UserPasswordPatch"
      responses:
        '200':
          description: Password Updated
        '400':
          $ref: '#/components/responses/UserPasswordPatchFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/UserPasswordPatchError'

  /user/email:
    patch:
      tags: [ User ]
      summary: Update user's email
      description: Updates user's email by password
      security:
        - cookieAuth: [ ]
      requestBody:
        $ref: "#/components/requestBodies/UserEmailPatch"
      responses:
        '200':
          description: Email updated
        '400':
          $ref: '#/components/responses/UserEmailPatchFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/UserEmailPatchError'

  /user/name:
    patch:
      tags: [ User ]
      summary: Update user name
      description: Updates user name
      security:
        - cookieAuth: [ ]
      requestBody:
        $ref: "#/components/requestBodies/UserNamePatch"
      responses:
        '200':
          description: Name updated
        '400':
          $ref: '#/components/responses/UserNamePatchFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/UserNamePatchError'

components:
  schemas:
    User:
      type: object
      readOnly: true
      required:
        - name
        - role
        - friendsIds
        - createTime
      properties:
        name:
          $ref: "#/components/schemas/Name"
        biography:
          $ref: "#/components/schemas/Biography"
        role:
          $ref: "#/components/schemas/Role"
        friendsIds:
          $ref: "#/components/schemas/FriendsIds"
        firstName:
          $ref: "#/components/schemas/FirstName"
        lastName:
          $ref: "#/components/schemas/LastName"
        createTime:
          $ref: "#/components/schemas/CreateTime"

    Me:
      type: object
      readOnly: true
      required:
        - name
        - role
        - language
        - theme
        - isEmailVerified
        - friendsIds
        - createTime
        - email
      properties:
        name:
          $ref: "#/components/schemas/Name"
        email:
          $ref: "#/components/schemas/Email"
        role:
          $ref: "#/components/schemas/Role"
        friendsIds:
          $ref: '#/components/schemas/FriendsIds'
        language:
          $ref: "#/components/schemas/Language"
        theme:
          $ref: "#/components/schemas/Theme"
        firstName:
          $ref: "#/components/schemas/FirstName"
        lastName:
          $ref: "#/components/schemas/LastName"
        biography:
          $ref: '#/components/schemas/Biography'
        createTime:
          $ref: '#/components/schemas/CreateTime'
        isEmailVerified:
          type: boolean
          readOnly: true
          example: false

    Error:
      type: object
      readOnly: true
      required:
        - code
      properties:
        description:
          type: string
          example: You are not logged in
        fields:
          type: object
          additionalProperties:
            type: string
          example:
            email: email is not the correct email
            code: code must have a length of 5

    Name:
      type: string
      writeOnly: true
      pattern: ^[a-zA-Z][a-zA-Z0-9_]{3,18}([a-zA-Z0-9])$
      example: user95
      minLength: 5
      maxLength: 20

    Email:
      type: string
      pattern: ^\S+@\S+\.\S+$
      format: email
      example: example@example.com

    Password:
      writeOnly: true
      type: string
      format: password
      pattern: ^\P{Cc}\P{Cn}\P{Cs}$
      example: Bob2020

    Code:
      writeOnly: true
      type: string
      minLength: 5
      maxLength: 5
      example: QUERY

    Theme:
      type: string
      enum:
        - DARK
        - LIGHT
        - SYSTEM
      example: SYSTEM

    Language:
      type: string
      enum:
        - EN
        - RU
      example: RU

    Role:
      enum:
        - USER
        - ADMIN
      type: string
      example: USER

    FirstName:
      type: string
      example: Bomb
      minLength: 3
      maxLength: 32

    LastName:
      type: string
      example: Hodovaniuk
      minLength: 3
      maxLength: 32

    FriendsIds:
      type: array
      readOnly: true
      items:
        type: integer
        uniqueItems: true
        example:
          - 17
          - 884
          - 6789

    Biography:
      type: string
      minLength: 1
      maxLength: 140
      example: 23 y.o designer from San Francisco

    CreateTime:
      type: string
      readOnly: true
      format: date-time
      example: 2023-06-10T15:06:14.491386+03:00

    Sessions:
      type: array
      readOnly: true
      items:
        type: string
        format: uuid
        example: [
          "16688d51-0752-4e29-864c-e9decdb4edbb",
          "dcbb2492-6dfa-4b29-9c06-06ba4ad0a686",
          "3119900c-81c0-4b2f-8b0b-fcca5e27787f",
          "d3fc61f1-31cd-4630-a4a9-7b569503651b",
          "de16ffd6-ebb6-472e-883c-b7f5afaa4f30",
          "555bf4a1-344f-4c5e-8dfb-3c66d2ca8433",
          "289c0a2d-44bf-44ac-9e27-102b8d779965",
          "5eb1fd09-b2c6-42a9-926a-9445edf97ab8",
          "455ed8f3-a70e-4d78-8427-a8ca2ff79132",
          "5725aba6-64a3-401b-b659-485807fbae5e"
        ]


  requestBodies:
    AuthEmailPost:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - code
            properties:
              email:
                $ref: "#/components/schemas/Email"
              code:
                $ref: "#/components/schemas/Code"
    
    AuthPasswordPost:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                $ref: "#/components/schemas/Email"
              password: 
                $ref: "#/components/schemas/Password"
    
    EmailSendCodePost:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email: 
                $ref: "#/components/schemas/Email"

    UserPatch:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                $ref: "#/components/schemas/FirstName"
              lastName:
                $ref: "#/components/schemas/LastName"
              biography:
                $ref: "#/components/schemas/Biography"
              theme:
                $ref: "#/components/schemas/Theme"
              language:
                $ref: "#/components/schemas/Language"

    UserPasswordPatch:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - oldPassword
              - newPassword
            properties:
              oldPassword:
                $ref: "#/components/schemas/Password"
              newPassword:
                $ref: "#/components/schemas/Password"

    UserEmailPatch:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - newEmail
              - password
            properties:
              newEmail:
                $ref: "#/components/schemas/Email"
              password:
                $ref: "#/components/schemas/Password"

    UserNamePatch:
      required: true
      content:
        application/json:
          schema:
            type: object
            writeOnly: true
            required:
              - name
            properties:
              name:
                $ref: '#/components/schemas/Name'

  parameters:
    Name:
      in: path
      description: Name
      name: name
      required: true
      schema:
        $ref: "#/components/schemas/Name"

  responses:
    SessionGetSuccess:
      description: User's info by session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Me'

    SessionGetError:
      description: Lost connection to Redis
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: transaction_failed
                    enum:
                      - server_error
                      - transaction_failed
              - $ref: "#/components/schemas/Error"

    SessionDeleteError:
      description: Lost connection to Redis
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: transaction_failed
                    enum:
                      - server_error
                      - transaction_failed
              - $ref: "#/components/schemas/Error"

    AuthSuccess:
      description: OK
      headers:
        Set-Cookie:
          schema:
            type: string
            example: session_id=f82f97fd-9930-4133-a6a7-1bccb3b933b4; Path=/api; Domain=localhost; SameSite=None; Secure; HttpOnly;

    AuthByEmailFailed:
      description: Check or recover your credentials
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: invalid_validation
                    enum:
                      - invalid_validation
                      - code_invalid_or_expired
              - $ref: "#/components/schemas/Error"

    AuthByEmailError:
      description: Can't use PostgreSQL connection
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: transaction_failed
                    enum:
                      - server_error
                      - transaction_failed
              - $ref: "#/components/schemas/Error"

    AuthByPasswordFailed:
      description: Check or recover your credentials
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: invalid_password
                    enum:
                      - invalid_password
                      - invalid_validation
                      - password_not_set
              - $ref: "#/components/schemas/Error"

    AuthByPasswordError:
      description: Lost connection to Postgresql
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: transaction_failed
                    enum:
                      - server_error
                      - transaction_failed
              - $ref: "#/components/schemas/Error"

    CheckNameFailed:
      description: Failed to check name on exist
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: already_exist
                    enum:
                      - already_exist
                      - invalid_validation
              - $ref: "#/components/schemas/Error"

    CheckNameError:
      description: Lost connection to PostgreSQL
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: server_error
                    enum:
                      - server_error
              - $ref: "#/components/schemas/Error"

    SendCodeFailed:
      description: Failed to send mail message
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: invalid_validation
                enum:
                  - invalid_validation
              - $ref: "#/components/schemas/Error"

    SendCodeError:
      description: Can't submit data
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: cant_send_mail
                    enum:
                      - cant_send_mail
                      - transaction_failed
                      - server_error
              - $ref: "#/components/schemas/Error"

    UserGetByUsernameSuccess:
      description: User was successfully got
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"

    UserGetByUsernameFailed:
      description: Failed to get user
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: not_found
                enum:
                  - not_found
                  - invalid_validation
              - $ref: "#/components/schemas/Error"

    UserGetByUsernameError:
      description: Lost connection to PostgreSQL
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: server_error
                    enum:
                      - server_error
              - $ref: "#/components/schemas/Error"

    UserPatchFailed:
      description: Failed to edit user data 
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: invalid_validation
                    enum:
                      - invalid_validation
              - $ref: "#/components/schemas/Error"

    UserPatchError:
      description: Lost connection to PostgreSQL
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: server_error
                    enum:
                      - server_error
              - $ref: "#/components/schemas/Error"

    UserPasswordPatchFailed:
      description: Failed to edit user password
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: invalid_password
                    enum:
                      - invalid_validation
                      - invalid_password
              - $ref: "#/components/schemas/Error"

    UserPasswordPatchError:
      description: Lost connection to PostgreSQL
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: server_error
                    enum:
                      - server_error
              - $ref: "#/components/schemas/Error"

    UserEmailPatchFailed:
      description: Failed to edit user email
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: invalid_password
                    enum:
                      - invalid_validation
                      - invalid_password
                      - already_exist
                      - password_not_set
              - $ref: "#/components/schemas/Error"

    UserEmailPatchError:
      description: Lost connection to PostgreSQL
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: server_error
                    enum:
                      - server_error
              - $ref: "#/components/schemas/Error"

    UserNamePatchFailed:
      description: Failed to edit user name
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: already_exist
                    enum:
                      - invalid_validation
                      - already_exist
              - $ref: "#/components/schemas/Error"

    UserNamePatchError:
      description: Lost connection to PostgreSQL
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - code
                properties:
                  code:
                    type: string
                    example: server_error
                    enum:
                      - server_error
              - $ref: "#/components/schemas/Error"

    Unauthorized:
      description: User must be authorized
      content:
        application/json:
          schema:
              $ref: "#/components/schemas/Error"

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session_id
