{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "It's an API interacting with You Together using Golang",
        "title": "You Together API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:3000",
    "basePath": "/api",
    "paths": {
        "/auth/email/sign-in": {
            "post": {
                "description": "Compare the secret code with the previously sent codes. If at least one matches, create session of the user. If the user does not exist, create a new user",
                "tags": [
                    "Authorization"
                ],
                "summary": "Sign in by email",
                "parameters": [
                    {
                        "description": "User's email, secret code and device",
                        "name": "user_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EmailWithCodeDTO"
                        }
                    },
                    {
                        "enum": [
                            "EN",
                            "RU"
                        ],
                        "type": "string",
                        "description": "User's language",
                        "name": "Accept-Language",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user's session"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    }
                }
            }
        },
        "/auth/password/sign-in": {
            "post": {
                "description": "Compare the user's password with an existing user's password. If it matches, create session of the user. If the user does not exist, create a new user",
                "tags": [
                    "Authorization"
                ],
                "summary": "Sign in by password",
                "parameters": [
                    {
                        "description": "User's email, password",
                        "name": "EmailWithPasswordDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EmailWithPasswordDTO"
                        }
                    },
                    {
                        "enum": [
                            "EN",
                            "RU"
                        ],
                        "type": "string",
                        "description": "User's language",
                        "name": "Accept-Language",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user's session"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "404": {
                        "description": "Password is not registered for this account",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    }
                }
            }
        },
        "/email/send-code": {
            "post": {
                "description": "Send a secret 5-digit code to the specified email",
                "tags": [
                    "Email"
                ],
                "summary": "Send code to the user's email",
                "parameters": [
                    {
                        "description": "User's email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EmailDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    }
                }
            }
        },
        "/session": {
            "get": {
                "description": "Return detail information about the user (cookie required)",
                "tags": [
                    "Sessions"
                ],
                "summary": "Get detail information about user by session",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MyUserDTO"
                        }
                    },
                    "401": {
                        "description": "User isn't logged in",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "404": {
                        "description": "User doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Make the user's session invalid (can accept cookie)",
                "tags": [
                    "Sessions"
                ],
                "summary": "Delete user's session",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/user": {
            "patch": {
                "description": "Change user's main information (cookie required)",
                "tags": [
                    "User Update"
                ],
                "summary": "Update user's information",
                "parameters": [
                    {
                        "description": "New user Information",
                        "name": "UpdateUserDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "401": {
                        "description": "User isn't logged in",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    }
                }
            }
        },
        "/user/check-name/{username}": {
            "get": {
                "description": "Status 200 if username not used or 403 if username already used",
                "tags": [
                    "User Get"
                ],
                "summary": "Check username on exist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the user",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "name isn't used"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "403": {
                        "description": "name already used"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    }
                }
            }
        },
        "/user/email": {
            "patch": {
                "description": "Change user's email by password (cookie required)",
                "tags": [
                    "User Update"
                ],
                "summary": "Update user's email",
                "parameters": [
                    {
                        "description": "user's password and new email",
                        "name": "UpdateEmailDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateEmailDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "401": {
                        "description": "User isn't logged in",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    }
                }
            }
        },
        "/user/name": {
            "patch": {
                "description": "Change user's username (cookie required)",
                "tags": [
                    "User Update"
                ],
                "summary": "Update user's username",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "401": {
                        "description": "User isn't logged in",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    }
                }
            }
        },
        "/user/password": {
            "patch": {
                "description": "Change user's password by email (cookie required)",
                "tags": [
                    "User Update"
                ],
                "summary": "Update user's password",
                "parameters": [
                    {
                        "description": "user's email, code and new password",
                        "name": "UpdatePasswordDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePasswordDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "401": {
                        "description": "User isn't logged in",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    }
                }
            }
        },
        "/user/{username}": {
            "get": {
                "description": "Return main information about the user. If the user tries to find out information about himself, return detailed information about the user (can accept cookie)",
                "tags": [
                    "User Get"
                ],
                "summary": "Get main information about the user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the user",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "main info, without cookie or dto.MyUserDTO",
                        "schema": {
                            "$ref": "#/definitions/dto.UserDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "404": {
                        "description": "User doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    }
                }
            }
        },
        "/{name}": {
            "get": {
                "description": "Returns type of object (NOT WORKING)",
                "tags": [
                    "Get"
                ],
                "summary": "Get type of the user (NOT WORKING)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of something",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "string type with object",
                        "schema": {
                            "$ref": "#/definitions/dto.UserDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "404": {
                        "description": "User doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exceptions.MyError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.EmailDTO": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "myemail@gmail.com"
                }
            }
        },
        "dto.EmailWithCodeDTO": {
            "type": "object",
            "required": [
                "code",
                "email"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "I1ELB"
                },
                "email": {
                    "type": "string",
                    "example": "myemail@gmail.com"
                },
                "theme": {
                    "type": "string",
                    "default": "SYSTEM",
                    "example": "DARK"
                }
            }
        },
        "dto.EmailWithPasswordDTO": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "myemail@gmail.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 4,
                    "example": "onkr3451"
                },
                "theme": {
                    "type": "string",
                    "default": "SYSTEM",
                    "example": "DARK"
                }
            }
        },
        "dto.MyUserDTO": {
            "description": "User detail information",
            "type": "object",
            "properties": {
                "biography": {
                    "type": "string",
                    "example": "I'd like to relax"
                },
                "email": {
                    "type": "string",
                    "example": "myemail@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "Tele"
                },
                "friendsIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "tldtb",
                        "kigfv"
                    ]
                },
                "isEmailVerified": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string",
                    "example": "phone"
                },
                "name": {
                    "type": "string",
                    "example": "bobbas"
                },
                "role": {
                    "type": "string"
                },
                "theme": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateEmailDTO": {
            "type": "object",
            "required": [
                "newEmail",
                "password"
            ],
            "properties": {
                "newEmail": {
                    "type": "string",
                    "example": "myemail@gmail.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 4,
                    "example": "onkr3451"
                }
            }
        },
        "dto.UpdatePasswordDTO": {
            "type": "object",
            "required": [
                "code",
                "email",
                "newPassword"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "I1ELB"
                },
                "email": {
                    "type": "string",
                    "example": "myemail@gmail.com"
                },
                "newPassword": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 4,
                    "example": "onkr3451"
                }
            }
        },
        "dto.UpdateUserDTO": {
            "type": "object",
            "properties": {
                "biography": {
                    "type": "string",
                    "example": "I'd like to relax"
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "Tele"
                },
                "language": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "phone"
                },
                "theme": {
                    "type": "string"
                }
            }
        },
        "dto.UserDTO": {
            "description": "User's main information",
            "type": "object",
            "properties": {
                "biography": {
                    "type": "string",
                    "example": "I'd like to relax"
                },
                "firstName": {
                    "type": "string",
                    "example": "Tele"
                },
                "friendsIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "tldtb",
                        "kigfv"
                    ]
                },
                "lastName": {
                    "type": "string",
                    "example": "phone"
                },
                "name": {
                    "type": "string",
                    "example": "bobbas"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "exceptions.MyError": {
            "description": "All native errors must be this type",
            "type": "object",
            "properties": {
                "advice": {
                    "type": "string",
                    "example": "Try to send request later"
                },
                "message": {
                    "type": "string",
                    "example": "Exception was occurred"
                }
            }
        }
    }
}