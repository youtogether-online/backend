basePath: /api
consumes:
- application/json
definitions:
  dao.Me:
    description: Detail information about the user
    properties:
      biography:
        example: I'd like to relax
        type: string
      email:
        example: myemail@gmail.com
        type: string
      firstName:
        example: Tele
        type: string
      friendsIds:
        example:
        - bobba
        - ' imaxied'
        items:
          type: string
        type: array
      isEmailVerified:
        example: true
        type: boolean
      language:
        example: RU
        type: string
      lastName:
        example: phone
        type: string
      name:
        example: bobbas
        type: string
      role:
        example: USER
        type: string
      theme:
        example: DARK
        type: string
    type: object
  dao.User:
    description: Main information about the user
    properties:
      biography:
        example: I'd like to relax
        type: string
      firstName:
        example: Tele
        type: string
      friendsIds:
        example:
        - tldtb
        - kigfv
        items:
          type: string
        type: array
      lastName:
        example: phone
        type: string
      name:
        example: bobbas
        type: string
      role:
        example: USER
        type: string
    type: object
  dto.Email:
    properties:
      email:
        example: myemail@gmail.com
        type: string
    required:
    - email
    type: object
  dto.EmailWithCode:
    properties:
      code:
        example: I1ELB
        type: string
      email:
        example: myemail@gmail.com
        type: string
      theme:
        default: SYSTEM
        example: DARK
        type: string
    required:
    - code
    - email
    type: object
  dto.EmailWithPassword:
    properties:
      email:
        example: myemail@gmail.com
        type: string
      password:
        example: onkr3451
        maxLength: 20
        minLength: 4
        type: string
      theme:
        default: SYSTEM
        example: DARK
        type: string
    required:
    - email
    - password
    type: object
  dto.UpdateEmail:
    properties:
      newEmail:
        example: myemail@gmail.com
        type: string
      password:
        example: onkr3451
        maxLength: 20
        minLength: 4
        type: string
    required:
    - newEmail
    - password
    type: object
  dto.UpdatePassword:
    properties:
      code:
        example: I1ELB
        type: string
      email:
        example: myemail@gmail.com
        type: string
      newPassword:
        example: onkr3451
        maxLength: 20
        minLength: 4
        type: string
    required:
    - code
    - email
    - newPassword
    type: object
  dto.UpdateUser:
    properties:
      biography:
        example: I'd like to relax
        type: string
      firstName:
        example: Tele
        maxLength: 30
        type: string
      language:
        type: string
      lastName:
        example: phone
        maxLength: 30
        type: string
      theme:
        type: string
    type: object
  errs.MyError:
    description: All native errors must be this type
    properties:
      advice:
        example: Try to send request later
        type: string
      message:
        example: Exception was occurred
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: It's an API interacting with You Together using Golang
  title: You Together API
  version: "1.0"
paths:
  /auth/email/sign-in:
    post:
      description: Compare the secret code with the previously sent codes. If at least
        one matches, create session of the user. If the user does not exist, create
        a new user
      parameters:
      - description: User's email, secret code and device
        in: body
        name: user_info
        required: true
        schema:
          $ref: '#/definitions/dto.EmailWithCode'
      - description: User's language
        enum:
        - EN
        - RU
        in: header
        name: Accept-Language
        type: string
      responses:
        "200":
          description: user's session
        "400":
          description: Data is not valid
          schema:
            $ref: '#/definitions/errs.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      summary: Sign in by email
      tags:
      - Authorization
  /auth/password/sign-in:
    post:
      description: Compare the user's password with an existing user's password. If
        it matches, create session of the user. If the user does not exist, create
        new user
      parameters:
      - description: User's email, password
        in: body
        name: EmailWithPassword
        required: true
        schema:
          $ref: '#/definitions/dto.EmailWithPassword'
      - description: User's language
        enum:
        - EN
        - RU
        in: header
        name: Accept-Language
        type: string
      responses:
        "200":
          description: user's session
        "400":
          description: Data is not valid
          schema:
            $ref: '#/definitions/errs.MyError'
        "404":
          description: Password is not registered for this account
          schema:
            $ref: '#/definitions/errs.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      summary: Sign in by password
      tags:
      - Authorization
  /email/send-code:
    post:
      description: Send a secret 5-digit code to the specified email
      parameters:
      - description: User's email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/dto.Email'
      responses:
        "200":
          description: OK
        "400":
          description: Data is not valid
          schema:
            $ref: '#/definitions/errs.MyError'
        "403":
          description: Unable to connect to the specified email
          schema:
            $ref: '#/definitions/errs.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      summary: Send code to the user's email
      tags:
      - Email
  /session:
    delete:
      description: Make the user's session invalid (can accept cookie)
      responses:
        "200":
          description: OK
      summary: Delete user's session
      tags:
      - Sessions
    get:
      description: Returns detail information about me (session required)
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dao.Me'
        "401":
          description: User isn't logged in
          schema:
            $ref: '#/definitions/errs.MyError'
        "404":
          description: User doesn't exist
          schema:
            $ref: '#/definitions/errs.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      summary: Get detail data about the user by session
      tags:
      - Sessions
  /user:
    patch:
      description: Change user's main information (session required)
      parameters:
      - description: New user data
        in: body
        name: UpdateUser
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUser'
      responses:
        "200":
          description: OK
        "400":
          description: Data is not valid
          schema:
            $ref: '#/definitions/errs.MyError'
        "401":
          description: User isn't logged in
          schema:
            $ref: '#/definitions/errs.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      summary: Update user's data
      tags:
      - User Update
  /user/{username}:
    get:
      description: Returns main information about the user
      parameters:
      - description: Name of the user
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: main info
          schema:
            $ref: '#/definitions/dao.User'
        "400":
          description: Param is not valid
          schema:
            $ref: '#/definitions/errs.MyError'
        "404":
          description: User doesn't exist
          schema:
            $ref: '#/definitions/errs.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      summary: Get main data about the user
      tags:
      - User Get
  /user/check-name/{username}:
    get:
      description: Status 200 if username not used or 403 if username is already used
      parameters:
      - description: Name of the user
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: name isn't used
        "400":
          description: Username is not valid
          schema:
            $ref: '#/definitions/errs.MyError'
        "403":
          description: name already used
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      summary: Check username on exist
      tags:
      - User Get
  /user/email:
    patch:
      description: Change user's email by password (session required)
      parameters:
      - description: user's password and new email
        in: body
        name: UpdateEmail
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateEmail'
      responses:
        "200":
          description: OK
        "400":
          description: Data is not valid
          schema:
            $ref: '#/definitions/errs.MyError'
        "401":
          description: User isn't logged in
          schema:
            $ref: '#/definitions/errs.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      summary: Update user's email
      tags:
      - User Update
  /user/name:
    patch:
      description: Change user's name (session required)
      responses:
        "200":
          description: OK
        "400":
          description: Data is not valid
          schema:
            $ref: '#/definitions/errs.MyError'
        "401":
          description: User isn't logged in
          schema:
            $ref: '#/definitions/errs.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      summary: Update user's name
      tags:
      - User Update
  /user/password:
    patch:
      description: Change user's password by email (session required)
      parameters:
      - description: user's email, code and new password
        in: body
        name: UpdatePassword
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePassword'
      responses:
        "200":
          description: OK
        "400":
          description: Data is not valid
          schema:
            $ref: '#/definitions/errs.MyError'
        "401":
          description: User isn't logged in
          schema:
            $ref: '#/definitions/errs.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      summary: Update user's password
      tags:
      - User Update
produces:
- application/json
schemes:
- http
swagger: "2.0"
