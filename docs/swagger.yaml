basePath: /api
consumes:
- application/json
definitions:
  dto.EmailDTO:
    properties:
      email:
        example: myemail@gmail.com
        type: string
    required:
    - email
    type: object
  dto.EmailWithCodeDTO:
    properties:
      code:
        example: I1ELB
        type: string
      email:
        example: myemail@gmail.com
        type: string
      theme:
        allOf:
        - $ref: '#/definitions/user.Theme'
        example: DARK
    required:
    - code
    - email
    type: object
  dto.EmailWithPasswordDTO:
    properties:
      email:
        example: myemail@gmail.com
        type: string
      password:
        example: onkr3451
        maxLength: 20
        minLength: 4
        type: string
      theme:
        allOf:
        - $ref: '#/definitions/user.Theme'
        example: DARK
    required:
    - email
    - password
    type: object
  dto.MyUserDTO:
    description: User detail information
    properties:
      biography:
        example: I'd like to relax
        type: string
      email:
        example: myemail@gmail.com
        type: string
      firstName:
        example: Tele
        type: string
      friendsIds:
        example:
        - tldtb
        - kigfv
        items:
          type: string
        type: array
      isEmailVerified:
        type: boolean
      language:
        $ref: '#/definitions/user.Language'
      lastName:
        example: phone
        type: string
      role:
        $ref: '#/definitions/user.Role'
      theme:
        $ref: '#/definitions/user.Theme'
      username:
        example: bobbas
        type: string
    type: object
  dto.UpdateEmailDTO:
    properties:
      newEmail:
        example: myemail@gmail.com
        type: string
      password:
        example: onkr3451
        maxLength: 20
        minLength: 4
        type: string
    required:
    - newEmail
    - password
    type: object
  dto.UpdatePasswordDTO:
    properties:
      code:
        example: I1ELB
        type: string
      email:
        example: myemail@gmail.com
        type: string
      newPassword:
        example: onkr3451
        maxLength: 20
        minLength: 4
        type: string
    required:
    - code
    - email
    - newPassword
    type: object
  dto.UpdateUserDTO:
    properties:
      biography:
        example: I'd like to relax
        type: string
      firstName:
        example: Tele
        maxLength: 30
        type: string
      language:
        $ref: '#/definitions/user.Language'
      lastName:
        example: phone
        maxLength: 30
        type: string
      theme:
        $ref: '#/definitions/user.Theme'
    type: object
  dto.UserDTO:
    description: User's main information
    properties:
      biography:
        example: I'd like to relax
        type: string
      firstName:
        example: Tele
        type: string
      friendsIds:
        example:
        - tldtb
        - kigfv
        items:
          type: string
        type: array
      lastName:
        example: phone
        type: string
      role:
        $ref: '#/definitions/user.Role'
    type: object
  exceptions.MyError:
    description: All native errors must be this type
    properties:
      advice:
        example: Try to send request later
        type: string
      message:
        example: Exception was occurred
        type: string
    type: object
  user.Language:
    enum:
    - EN
    - RU
    type: string
    x-enum-varnames:
    - DefaultLanguage
    - LanguageEN
    - LanguageRU
  user.Role:
    enum:
    - USER
    - ADMIN
    type: string
    x-enum-varnames:
    - DefaultRole
    - RoleUSER
    - RoleADMIN
  user.Theme:
    enum:
    - WHITE
    - DARK
    - SYSTEM
    type: string
    x-enum-varnames:
    - DefaultTheme
    - ThemeWHITE
    - ThemeDARK
    - ThemeSYSTEM
host: localhost:3000
info:
  contact: {}
  description: It's an API interacting with You Together using Golang
  title: You Together API
  version: "1.0"
paths:
  /auth/email/send-code:
    post:
      description: Send a secret 5-digit code to the specified email
      parameters:
      - description: User's email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/dto.EmailDTO'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.MyError'
      summary: Send code to the user's email
      tags:
      - Authorization
  /auth/email/sign-in:
    post:
      description: Compare the secret code with the previously sent codes. If at least
        one matches, create session of the user. If the user does not exist, create
        a new user
      parameters:
      - description: User's email, secret code and device
        in: body
        name: user_info
        required: true
        schema:
          $ref: '#/definitions/dto.EmailWithCodeDTO'
      - description: User's language. Default EN
        enum:
        - EN
        - RU
        in: header
        name: Accept-Language
        type: string
      responses:
        "200":
          description: user's session
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.MyError'
      summary: Sign in by email
      tags:
      - Authorization
  /auth/password/sign-in:
    post:
      description: Compare the user's password with an existing user's password. If
        it matches, create session of the user. If the user does not exist, create
        a new user
      parameters:
      - description: User's email, password
        in: body
        name: EmailWithPasswordDTO
        required: true
        schema:
          $ref: '#/definitions/dto.EmailWithPasswordDTO'
      - description: User's language. Default EN
        enum:
        - EN
        - RU
        in: header
        name: Accept-Language
        type: string
      responses:
        "200":
          description: user's session
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "404":
          description: Password is not registered for this account
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.MyError'
      summary: Sign in by password
      tags:
      - Authorization
  /auth/sign-out:
    post:
      description: Make the user's session invalid (can accept cookie)
      responses:
        "200":
          description: OK
      summary: Delete user's session
      tags:
      - Authorization
  /user:
    get:
      description: Return detail information about the user (cookie required)
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MyUserDTO'
        "401":
          description: User isn't logged in
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "404":
          description: User doesn't exist
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.MyError'
      summary: Get detail information about user by session
      tags:
      - User Get
  /user/{username}:
    get:
      description: Return main information about the user. If the user tries to find
        out information about himself, return detailed information about the user
        (can accept cookie)
      parameters:
      - description: the name of the desired user to find
        in: header
        name: username
        required: true
        type: string
      responses:
        "200":
          description: dto.UserDTO or dto.MyUserDTO
          schema:
            $ref: '#/definitions/dto.UserDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "404":
          description: User doesn't exist
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.MyError'
      summary: Get main information about the user
      tags:
      - User Get
  /user/upd:
    patch:
      description: Change user's main information (cookie required)
      parameters:
      - description: New user Information
        in: body
        name: UpdateUserDTO
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDTO'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "401":
          description: User isn't logged in
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.MyError'
      summary: Update user's information
      tags:
      - User Update
  /user/upd/:username:
    get:
      description: Status 200 if username not used or 403 if username already used
      responses:
        "200":
          description: name isn't used
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "403":
          description: name already used
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.MyError'
      summary: Check username on exist
      tags:
      - User Get
  /user/upd/mail:
    patch:
      description: Change user's email by password (cookie required)
      parameters:
      - description: user's password and new email
        in: body
        name: UpdateEmailDTO
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateEmailDTO'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "401":
          description: User isn't logged in
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.MyError'
      summary: Update user's email
      tags:
      - User Update
  /user/upd/name:
    patch:
      description: Change user's username (cookie required)
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "401":
          description: User isn't logged in
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.MyError'
      summary: Update user's username
      tags:
      - User Update
  /user/upd/pass:
    patch:
      description: Change user's password by email (cookie required)
      parameters:
      - description: user's email, code and new password
        in: body
        name: UpdatePasswordDTO
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePasswordDTO'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "401":
          description: User isn't logged in
          schema:
            $ref: '#/definitions/exceptions.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.MyError'
      summary: Update user's password
      tags:
      - User Update
produces:
- application/json
schemes:
- http
swagger: "2.0"
